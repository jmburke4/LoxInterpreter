/// This file was autogenerated by LoxInterpreter/GenerateAst at 10.30.25 12:26:18.

namespace LoxInterpreter;

public abstract partial class Expr()
{
	public interface IVisitor<T>
	{
		T VisitAssignExpr(Assign expr);

		T VisitBinaryExpr(Binary expr);

		T VisitGroupingExpr(Grouping expr);

		T VisitLiteralExpr(Literal expr);

		T VisitUnaryExpr(Unary expr);

		T VisitVariableExpr(Variable expr);

	}

	public abstract T Accept<T>(IVisitor<T> visitor);

	public partial class Assign(Token Name, Expr Value) : Expr()
	{
		private readonly Token _name = Name;

		private readonly Expr _value = Value;

		public Token Name => _name;

		public Expr Value => _value;

		public override T Accept<T>(IVisitor<T> visitor)
		{
			return visitor.VisitAssignExpr(this);
		}

	}

	public partial class Binary(Expr Left, Token Operator, Expr Right) : Expr()
	{
		private readonly Expr _left = Left;

		private readonly Token _operator = Operator;

		private readonly Expr _right = Right;

		public Expr Left => _left;

		public Token Operator => _operator;

		public Expr Right => _right;

		public override T Accept<T>(IVisitor<T> visitor)
		{
			return visitor.VisitBinaryExpr(this);
		}

	}

	public partial class Grouping(Expr Expression) : Expr()
	{
		private readonly Expr _expression = Expression;

		public Expr Expression => _expression;

		public override T Accept<T>(IVisitor<T> visitor)
		{
			return visitor.VisitGroupingExpr(this);
		}

	}

	public partial class Literal(object? Value) : Expr()
	{
		private readonly object? _value = Value;

		public object? Value => _value;

		public override T Accept<T>(IVisitor<T> visitor)
		{
			return visitor.VisitLiteralExpr(this);
		}

	}

	public partial class Unary(Token Operator, Expr Right) : Expr()
	{
		private readonly Token _operator = Operator;

		private readonly Expr _right = Right;

		public Token Operator => _operator;

		public Expr Right => _right;

		public override T Accept<T>(IVisitor<T> visitor)
		{
			return visitor.VisitUnaryExpr(this);
		}

	}

	public partial class Variable(Token Name) : Expr()
	{
		private readonly Token _name = Name;

		public Token Name => _name;

		public override T Accept<T>(IVisitor<T> visitor)
		{
			return visitor.VisitVariableExpr(this);
		}

	}

}

