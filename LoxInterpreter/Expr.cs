/// This file was autogenerated by LoxInterpreter/GenerateAst at 10.24.25 16:42:50.

namespace LoxInterpreter;

public interface IVisitor<T>
{
	T VisitBinaryExpr(Binary expr);

	T VisitGroupingExpr(Grouping expr);

	T VisitLiteralExpr(Literal expr);

	T VisitUnaryExpr(Unary expr);

}

public abstract partial class Expr()
{
	public abstract T Accept<T>(IVisitor<T> visitor);
}

public partial class Binary(Expr Left, Token Operator, Expr Right) : Expr()
{
	private readonly Expr _left = Left;

	private readonly Token _operator = Operator;

	private readonly Expr _right = Right;

	public Expr Left => _left;

	public Token Operator => _operator;

	public Expr Right => _right;

	public override T Accept<T>(IVisitor<T> visitor)
	{
		return visitor.VisitBinaryExpr(this);
	}

}

public partial class Grouping(Expr Expression) : Expr()
{
	private readonly Expr _expression = Expression;

	public Expr Expression => _expression;

	public override T Accept<T>(IVisitor<T> visitor)
	{
		return visitor.VisitGroupingExpr(this);
	}

}

public partial class Literal(object? Value) : Expr()
{
	private readonly object? _value = Value;

	public object? Value => _value;

	public override T Accept<T>(IVisitor<T> visitor)
	{
		return visitor.VisitLiteralExpr(this);
	}

}

public partial class Unary(Token Operator, Expr Right) : Expr()
{
	private readonly Token _operator = Operator;

	private readonly Expr _right = Right;

	public Token Operator => _operator;

	public Expr Right => _right;

	public override T Accept<T>(IVisitor<T> visitor)
	{
		return visitor.VisitUnaryExpr(this);
	}

}

