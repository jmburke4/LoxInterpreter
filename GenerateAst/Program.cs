namespace GenerateAst;

class Program
{
    private static void DefineBase(string dir, string baseName, List<string> types)
    {
        string path = $"{dir}\\{baseName}.cs";

        // Delete the old file before generating the new one
        if (File.Exists(path))
        {
            Console.WriteLine($"Deleting {path}");
            File.Delete(path);
        }

        // Write to a new .cs file
        using StreamWriter sw = new(path, true);

        sw.WriteLine($"/// This file was autogenerated by LoxInterpreter/GenerateAst at {DateTime.Now.ToString("MM.dd.yy HH:mm:ss")}.");
        sw.WriteLine();
        sw.WriteLine("namespace LoxInterpreter;");
        sw.WriteLine();

        // Define IVisitor interface
        DefineIVistor(sw, baseName, types);

        // Write base class
        Console.WriteLine($"Writing class {baseName}()");
        sw.WriteLine($"public abstract partial class {baseName}()");
        sw.WriteLine("{");
        sw.WriteLine("\tpublic abstract T Accept<T>(IVisitor<T> visitor);");
        sw.WriteLine("}\n");

        // Write children classes
        foreach (string type in types)
        {
            string className = type.Split(":")[0].Trim();

            Console.WriteLine($"Writing class {className}()");
            string fields = type.Split(":")[1].Trim();
            DefineDerived(sw, baseName, className, fields);
        }
    }

    private static void DefineDerived(StreamWriter sw, string baseName,
        string className, string fieldList)
    {
        // Add primary constructor
        sw.WriteLine($"public partial class {className}({fieldList}) : {baseName}()");
        sw.WriteLine("{");

        // Add private fields initialized by primary constructor
        string[] fields = fieldList.Split(", ");
        foreach (string field in fields)
        {
            string name = field.Split(" ")[1];
            string type = field.Split(" ")[0];
            sw.WriteLine($"\tprivate readonly {type} _{name.ToLower()} = {name};\n");
        }

        // Add public getters that return the private fields
        foreach (string field in fields)
        {
            string name = field.Split(" ")[1];
            string type = field.Split(" ")[0];
            sw.WriteLine($"\tpublic {type} {name} => _{name.ToLower()};\n");
        }

        // Implement Accept method
        sw.WriteLine("\tpublic override T Accept<T>(IVisitor<T> visitor)\n\t{");
        sw.WriteLine($"\t\treturn visitor.Visit{className}{baseName}(this);");
        sw.WriteLine("\t}\n");

        sw.WriteLine("}\n");
    }

    private static void DefineIVistor(StreamWriter sw, string baseName, List<string> types)
    {
        Console.WriteLine($"Writing interface IVisitor<T>");

        sw.WriteLine("public interface IVisitor<T>\n{");

        foreach (string type in types)
        {
            string className = type.Split(":")[0].Trim();
            sw.WriteLine($"\tT Visit{className}{baseName}({className} expr);\n");
        }
        sw.WriteLine("}\n");
    }

    public static void Main(string[] args)
    {
        if (args.Length != 1)
        {
            Console.WriteLine("Usage: generateast <output_dir> | ast");
            return;
        }
        else if (!Directory.Exists(args[0]))
        {
            Console.WriteLine($"{args[0]} is an invalid directory");
            return;
        }

        string baseName = "Expr";
        List<string> types =
        [
            "Binary   : Expr Left, Token Operator, Expr Right",
            "Grouping : Expr Expression",
            "Literal  : Object Value",
            "Unary    : Token Operator, Expr Right"
        ];

        DefineBase(args[0], baseName, types);

        Console.WriteLine($"Generated {baseName}.cs with {types.Count + 1} classes.");
    }
}
